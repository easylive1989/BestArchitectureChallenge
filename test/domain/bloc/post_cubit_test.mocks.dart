// Mocks generated by Mockito 5.0.14 from annotations
// in best_architecture_challenge/test/domain/bloc/post_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:best_architecture_challenge/domain/entity/post.dart' as _i4;
import 'package:best_architecture_challenge/domain/entity/sort_type.dart'
    as _i3;
import 'package:best_architecture_challenge/domain/use_case/post_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [PostService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostService extends _i1.Mock implements _i2.PostService {
  MockPostService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i3.SortType, int Function(_i4.Post, _i4.Post)> get sortRule =>
      (super.noSuchMethod(Invocation.getter(#sortRule),
              returnValue: <_i3.SortType, int Function(_i4.Post, _i4.Post)>{})
          as Map<_i3.SortType, int Function(_i4.Post, _i4.Post)>);
  @override
  _i5.Future<List<_i4.Post>> fetch(_i3.SortType? sortType) =>
      (super.noSuchMethod(Invocation.method(#fetch, [sortType]),
              returnValue: Future<List<_i4.Post>>.value(<_i4.Post>[]))
          as _i5.Future<List<_i4.Post>>);
  @override
  String toString() => super.toString();
}
